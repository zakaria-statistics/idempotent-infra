---
- name: Initialize Kubernetes Control Plane Node
  hosts: vm
  become: true
  vars:
    pod_cidr: "192.168.0.0/16"
    cri_socket: "unix:///run/containerd/containerd.sock"
    control_plane_iface: "enp0s8"
    kubeadm_path: "/usr/bin/kubeadm"
    kubectl_path: "/usr/bin/kubectl"
    kube_config_path: "/home/{{ ansible_user }}/.kube"
    kube_config_file: "{{ kube_config_path }}/config"
    calico_manifest_url: "https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml"

  tasks:
    - name: Set SystemdCgroup to true in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd to apply config
      systemd:
        name: containerd
        state: restarted
        enabled: true

    - name: Add kube hostname to /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "192.168.56.10 kube"
        state: present
        create: yes

    - name: Ensure required tools are present
      stat:
        path: "{{ item }}"
      loop:
        - "{{ kubeadm_path }}"
        - "{{ kubectl_path }}"
      register: tools_check

    - name: Fail if required tools are missing
      fail:
        msg: "Missing required tool: {{ item.item }}"
      loop: "{{ tools_check.results }}"
      when: not item.stat.exists

    - name: Fetch IP of control plane node
      command: ip -o -4 addr list {{ control_plane_iface }}
      register: ip_output
      changed_when: false

    - name: Extract control plane IP
      set_fact:
        master_ip: "{{ ip_output.stdout.split()[3].split('/')[0] }}"

    - name: Check if Kubernetes cluster is already initialized
      stat:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
      register: kube_apiserver_stat

    - name: kubeadm reset
      command: "{{ kubeadm_path }} reset -f --cri-socket={{ cri_socket }}"
      ignore_errors: true
      when: kube_apiserver_stat.stat.exists

    - name: Clean Kubernetes-related directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/cni/net.d
        - /var/lib/etcd
        - /var/lib/kubelet
        - /etc/kubernetes
      when: kube_apiserver_stat.stat.exists

    - name: Wait briefly to ensure etcd is cleared
      pause:
        seconds: 5
      when: kube_apiserver_stat.stat.exists

    - name: Flush iptables
      shell: |
        iptables -F && iptables -t nat -F && iptables -t mangle -F
        iptables -X && iptables -t nat -X && iptables -t mangle -X
      when: kube_apiserver_stat.stat.exists

    - name: Clear IPVS rules (if ipvsadm exists)
      command: ipvsadm --clear
      when: kube_apiserver_stat.stat.exists and ansible_facts.packages['ipvsadm'] is defined
      ignore_errors: true


    - name: Restart containerd and kubelet
      systemd:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop:
        - containerd
        - kubelet

    - name: Wait for containerd socket
      wait_for:
        path: "{{ cri_socket | regex_replace('^unix://', '') }}"
        timeout: 30

    - name: Wait for kubelet to be active
      shell: |
        until systemctl is-active --quiet kubelet; do sleep 1; done
      retries: 10
      delay: 3
      register: kubelet_ready
      until: kubelet_ready.rc == 0

    - name: Pre-pull Kubernetes images
      command: "{{ kubeadm_path }} config images pull --cri-socket={{ cri_socket }}"

    - name: Run kubeadm init
      command: >
        {{ kubeadm_path }} init
        --apiserver-advertise-address={{ master_ip }}
        --apiserver-cert-extra-sans={{ master_ip }}
        --pod-network-cidr={{ pod_cidr }}
        --cri-socket={{ cri_socket }}
        --node-name {{ ansible_hostname }}
        --ignore-preflight-errors=Swap
      register: kubeadm_init
      failed_when: kubeadm_init.rc != 0

    - name: Debug kubeadm init failure if occurred
      debug:
        var: kubeadm_init.stderr_lines
      when: kubeadm_init.rc != 0

    - name: Create kube config directory
      file:
        path: "{{ kube_config_path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    - name: Copy admin.conf to user kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kube_config_file }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"

    - name: Export KUBECONFIG permanently in user bashrc
      lineinfile:
        path: "/home/{{ ansible_user }}/.bashrc"
        line: "export KUBECONFIG={{ kube_config_file }}"
        create: yes
        insertafter: EOF
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"

    - name: Ensure root kube config is created
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Copy admin.conf to root kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: "0644"

    - name: Export KUBECONFIG permanently in root bashrc
      lineinfile:
        path: "/root/.bashrc"
        line: "export KUBECONFIG=/root/.kube/config"
        create: yes
        insertafter: EOF
        owner: root
        group: root
        mode: "0644"

    - name: Wait for API server to be ready
      uri:
        url: "https://{{ master_ip }}:6443/healthz"
        method: GET
        validate_certs: false
        status_code: 200
      register: api_health
      retries: 20
      delay: 5
      until: api_health.status == 200

    - name: Remove control-plane taint (allow workloads on master)
      command: >
        {{ kubectl_path }} taint nodes --all node-role.kubernetes.io/control-plane-
      environment:
        KUBECONFIG: "{{ kube_config_file }}"
      ignore_errors: yes

    - name: Download Calico manifest
      get_url:
        url: "{{ calico_manifest_url }}"
        dest: "/home/{{ ansible_user }}/calico.yaml"
        mode: "0644"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Apply Calico CNI
      command: "{{ kubectl_path }} apply -f /home/{{ ansible_user }}/calico.yaml"
      environment:
        KUBECONFIG: "{{ kube_config_file }}"
